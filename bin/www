#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('dunkees-src-api:server');
let http = require('http');

const safeJsonStringify = require('safe-json-stringify');

const constants = require('../app/utils/constants');
const serviceInitiallier = require('../serviceInitiallizer');
const loggerModule = require('../app/services/loggerService');
const logger = new loggerModule().getLogger(constants.LOGGER_MODULE.SERVICE.WWW);
/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3201');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);
/**
 * ServiceInitiallier to set up required services before starting the app.
 */
serviceInitiallier.initServices()
  .then(() => {
    logger.info(`[SERVICE INITIALLIZER] Successfully initiated required services for the application to start`);
    server.listen(port, () => {
      logger.info(`Listening on port: ${port}.`);
    });
  }).catch((err) => {
    logger.error(`[SERVICE INITIALLIZER] Failure in initiating required services for application start : ${safeJsonStringify(err)}`);
    process.exit(1);
  });

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
